<?php

namespace App\OurEdu\GeneralQuizzes\Models;
use App\OurEdu\Courses\Models\Course;
use App\OurEdu\GeneralQuizzes\Enums\GeneralQuizTypeEnum;
use App\OurEdu\GeneralQuizzes\Observers\GeneralQuizObserver;
use App\OurEdu\GradeClasses\GradeClass;
use App\OurEdu\SchoolAccounts\SchoolAccounts\SchoolAccount;
use App\OurEdu\Users\User;
use App\OurEdu\BaseApp\BaseModel;
use App\OurEdu\BaseApp\Traits\CreatedBy;
use App\OurEdu\SchoolAccounts\SchoolAccountBranches\SchoolAccountBranch;
use App\OurEdu\SchoolAccounts\Classroom;
use App\OurEdu\Subjects\Models\SubModels\SubjectFormatSubject;
use App\OurEdu\Subjects\Models\Subject;
use Illuminate\Database\Eloquent\SoftDeletes;
use App\OurEdu\GeneralQuizzes\Models\GeneralQuizStudentAnswer;
use App\OurEdu\Scopes\NotEndedScope;
use App\OurEdu\Users\Models\Student;
use Illuminate\Database\Eloquent\Builder;

class GeneralQuiz extends BaseModel
{
    use CreatedBy;
    use SoftDeletes;
    protected $table = 'general_quizzes';
    protected $guarded = ['id'];
    protected $casts = [
        'subject_sections' => 'array'
    ];
    protected $appends = ['sections' , 'students_count'];
    protected $dates = ['start_at', 'end_at'];


    /**
     * Bootstrap the model and its traits.
     *
     * @return void
     */
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::observe(GeneralQuizObserver::class);
    }

    public function classrooms(){
        return $this->belongsToMany(Classroom::class,'classroom_general_quiz','general_quiz_id','classroom_id');
    }

    public function subject(){
        return $this->belongsTo(Subject::class,'subject_id')->withoutGlobalScope(NotEndedScope::class);
    }

    public function students(){
        return $this->belongsToMany(User::class,'general_quiz_user','general_quiz_id','user_id');
    }

    public function branch(){
        return $this->belongsTo(SchoolAccountBranch::class);
    }

    public function school(){
        return $this->belongsTo(SchoolAccount::class ,'school_account_id');
    }

    public function  getSectionsAttribute(){
        return SubjectFormatSubject::whereIn('id',$this->subject_sections)->get();
    }

    public function sectionsRelations()
    {
        return $this->belongsToMany(SubjectFormatSubject::class, "general_quiz_subject_format_subject", "general_quiz_id", "subject_format_subject_id");
    }


    // public function questions()
    // {
    //     return $this->hasMany(GeneralQuizQuestionBank::class , 'general_quiz_id');
    // }

    public function questions()
    {
        return $this->belongsToMany(GeneralQuizQuestionBank::class,'general_quiz_question','general_quiz_id','question_id')->withPivot('added_from_bank');
    }

    public function studentsAnswered(){
        return $this->hasMany(GeneralQuizStudent::class,'general_quiz_id');
    }

    public function quizStudentAnswers(){
        return $this->hasMany(GeneralQuizStudentAnswer::class,'general_quiz_id');
    }


    public function scopeActive($query)
    {
        return $query->where('is_active', 1);
    }

    public function gradeClass()
    {
        return $this->belongsTo(GradeClass::class)->with('translations');
    }

    public function course()
    {
        return $this->belongsTo(Course::class , 'course_id');
    }


    public function getHomeworkAvgAttribute()
    {
        $studentsGradsQry= $this->studentsAnswered()->where('is_finished','=',1);
        $studentsGradsAvg=0;

        if($studentsGradsQry->count()>0){
            $studentsGradsAvg=$studentsGradsQry->sum('score')/$studentsGradsQry->count();
        }

        return number_format($studentsGradsAvg, 2, '.', '');
    }

    public function getQuizAvgPercentageAttribute()
    {
        $studentsGradsQry = $this->studentsAnswered;
        $studentsGradsAvg = 0;
        if($studentsGradsQry->count()>0){
            $studentsGradsAvg = $studentsGradsQry->sum('score_percentage')/$studentsGradsQry->count();
        }
        return number_format($studentsGradsAvg, 2, '.', '');
    }


    public function getSuccessfulPercentageAttribute()
    {
        $average = $this->average_scores ?? 0.00;

        if ($this->mark) {
            $percentage = ($average / $this->mark)*100;

            return number_format($percentage, 2, '.', '');
        }

        return 0.00;
    }

    /**
     * @return mixed
     */
    public function getHighestGradeAttribute()
    {
        return $this->studentsAnswered
            ->max("score");
    }

    /**
     * @return mixed
     */
    public function getLowerGradeAttribute()
    {
        return $this->studentsAnswered
            ->min("score");
    }

    public function getStudentsCountAttribute()
    {
        $generalQuizStudents = $this->students()->count();

        if (!$generalQuizStudents) {
            $quizClassrooms = $this->classrooms()->pluck("id")->toArray();

            $generalQuizStudents  = Student::query()
                ->whereIn("classroom_id", $quizClassrooms)
                ->count();
        }

        return $generalQuizStudents;

    }

    public function scopeNotFormative($query)
    {
            $query->where('quiz_type','!=',GeneralQuizTypeEnum::FORMATIVE_TEST);
    }
}
